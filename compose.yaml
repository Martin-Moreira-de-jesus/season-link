# this files holds the different services that are used by all applications
# this includes the database, the mailer, keycloak, the s3 storage

services:
  postgresql:
    image: bitnami/postgresql:14-debian-11
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgresql:/var/lib/postgresql/data
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/

  keycloak:
    image: bitnami/keycloak:22.0.4
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 8080:8080
    environment:
      KEYCLOAK_ADMIN_USER: super
      KEYCLOAK_ADMIN_PASSWORD: super
      KEYCLOAK_DATABASE_HOST: postgresql
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: keycloak
      KEYCLOAK_DATABASE_PASSWORD: keycloak
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: "true"
      KEYCLOAK_ENABLE_HTTPS: "false"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/bitnami/keycloak/bin/kcadm.sh config credentials --config /tmp/config --server http://localhost:8080 --user super --password super --realm master && rm /tmp/config",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-init:
    image: bitnami/keycloak:22.0.4
    restart: no
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN_USER: super
      KEYCLOAK_ADMIN_PASSWORD: super
      KEYCLOAK_HOST: keycloak:8080
      KEYCLOAK_NEW_REALM: season-link
      KEYCLOAK_NEW_CLIENT_ID: mobile-app
      KEYCLOAK_NEW_CLIENT_SECRET: mobile-app
      KEYCLOAK_NEW_USER: contact@season-link.com
      KEYCLOAK_NEW_PASSWORD: contact
      KEYCLOAK_VALID_REDIRECT_URIS: '["http://localhost:4354/*", "http://127.0.0.1:4354/*", "exp://127.0.0.1:4354/*"]'
      KEYCLOAK_SMTP_HOST: mailhog
      KEYCLOAK_SMTP_PORT: 587
      KEYCLOAK_SMTP_USER: seasonlink
      KEYCLOAK_SMTP_PASSWORD: seasonlink
      KEYCLOAK_PROFILES_USER: "profiles"
      KEYCLOAK_PROFILES_PASSWORD: "profiles"
      DEV: true
    volumes:
      - ./scripts/keycloak/init-script.sh:/tmp/init-script.sh
    entrypoint: ["/bin/sh", "-c", "/tmp/init-script.sh"]

  mailhog:
    image: mailhog/mailhog:v1.0.1
    restart: unless-stopped
    ports:
      - 1025:1025
      - 8025:8025
    volumes:
      - ./.mailhog.auth:/etc/mailhog.auth:ro
    environment:
      MH_AUTH_FILE: /etc/mailhog.auth

  gateway:
    container_name: gateway
    command: ["./mvnw", "spring-boot:run", "-DskipTests=true"]
    ports:
      - 8081:8080
    env_file:
      - ./apps/gateway/.env
    build:
      context: apps/gateway
      dockerfile: dev.Dockerfile
    restart: unless-stopped
    develop:
      watch:
        - action: sync+restart
          path: apps/gateway
          target: /app
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  job-offers:
    container_name: job-offers
    command: ["./mvnw", "spring-boot:run", "-DskipTests=true"]
    env_file:
      - ./apps/job-offers/.env
    build:
      context: apps/job-offers
      dockerfile: dev.Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgresql:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: apps/job-offers
          target: /app

  chat:
    container_name: chat
    env_file:
      - ./apps/chat/.env
    build:
      context: apps/chat
      dockerfile: Dockerfile
      target: dev
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: apps/chat
          target: /app
          ignore: ["node_modules"]
        - action: sync+restart
          path: apps/chat/Dockerfile
          target: /app
        - action: sync+restart
          path: apps/chat/package.json
          target: /app
        - action: sync+restart
          path: apps/chat/prisma/schema.prisma
          target: /app

  companies:
    container_name: companies
    env_file:
      - ./apps/companies/.env
    build:
      context: apps/companies
      dockerfile: Dockerfile
      target: dev
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: apps/companies
          target: /app
          ignore: ["node_modules"]
        - action: sync+restart
          path: apps/companies/Dockerfile
          target: /app
        - action: sync+restart
          path: apps/companies/package.json
          target: /app
        - action: sync+restart
          path: apps/companies/prisma/schema.prisma
          target: /app

  jobs:
    build:
      context: apps/jobs
      dockerfile: dev.Dockerfile
    env_file:
      - ./apps/jobs/.env
    develop:
      watch:
        - action: sync
          path: apps/jobs
          target: /app

  mock:
    build:
      context: apps/mock
    volumes:
      - ./apps/mock/data:/app/data
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/jobs",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  profile-backend:
    image: season-link-profiles
    build: ./apps/profiles/
    env_file:
      - ./apps/profiles/.env.local
    ports:
      - "4000:4000"
    depends_on:
      postgresql:
        condition: service_healthy
      profile-minio:
        condition: service_started

  profile-minio:
    image: minio/minio
    volumes:
      - "minio_storage:/data"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio_pass

    command: server --console-address ":9001" /data

  # Image generator used for the PFPs
  go-image-generator:
    image: ghcr.io/mathias-boulay/go-image-generator:latest
    environment:
      - SERVER_PORT=5555
      - SERVER_IMAGE_BINARY=true

  neo4j:
    image: neo4j
    environment:
      - NEO4J_PLUGINS=["apoc", "apoc-extended"]
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_security_procedures_allowlist=gds.*, apoc.*
      - NEO4J_dbms_security_procedures_unrestricted=gds.*, apoc.*
    ports:
      - 7474:7474
      - 7473:7473
      - 7687:7687
    volumes:
      - neo4j:/bitnami/neo4j

  nats:
    image: bitnami/nats:2.10.5
    container_name: nats
    ports:
      - 4222:4222
      - 6222:6222
      - 8222:8222

volumes:
  postgresql:
  minio_storage:
  neo4j:
