# this files holds the different services that are used by all applications
# this includes the database, the mailer, keycloak, the s3 storage

services:
  postgresql:
    image: bitnami/postgresql:14-debian-11
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgresql:/var/lib/postgresql/data
      - ./scripts/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  keycloak:
    image: bitnami/keycloak:22.0.4
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 8080:8080
    environment:
      KEYCLOAK_ADMIN_USER: super
      KEYCLOAK_ADMIN_PASSWORD: super
      KEYCLOAK_DATABASE_HOST: postgresql
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: keycloak
      KEYCLOAK_DATABASE_PASSWORD: keycloak
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: "true"
      KEYCLOAK_ENABLE_HTTPS: "false"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/bitnami/keycloak/bin/kcadm.sh config credentials --config /tmp/config --server http://localhost:8080 --user super --password super --realm master && rm /tmp/config",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak-init:
    image: bitnami/keycloak:22.0.4
    restart: no
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN_USER: super
      KEYCLOAK_ADMIN_PASSWORD: super
      KEYCLOAK_HOST: keycloak:8080
      KEYCLOAK_NEW_REALM: season-link
      KEYCLOAK_NEW_CLIENT_ID: mobile-app
      KEYCLOAK_NEW_CLIENT_SECRET: mobile-app
      KEYCLOAK_NEW_USER: contact@season-link.com
      KEYCLOAK_NEW_PASSWORD: contact
      KEYCLOAK_VALID_REDIRECT_URIS: '["http://localhost:8081/*", "exp://10.112.0.115:8081"]'
      KEYCLOAK_SMTP_HOST: mailhog
      KEYCLOAK_SMTP_PORT: 587
      KEYCLOAK_SMTP_USER: seasonlink
      KEYCLOAK_SMTP_PASSWORD: seasonlink
      KEYCLOAK_PROFILES_USER: "profiles"
      KEYCLOAK_PROFILES_PASSWORD: "profiles"
      DEV: true
    volumes:
      - ./scripts/keycloak/init-script.sh:/tmp/init-script.sh
    entrypoint: ["/bin/sh", "-c", "/tmp/init-script.sh"]

  mailhog:
    image: mailhog/mailhog:v1.0.1
    restart: unless-stopped
    ports:
      - 1025:1025
      - 8025:8025
    volumes:
      - ./.mailhog.auth:/etc/mailhog.auth:ro
    environment:
      MH_AUTH_FILE: /etc/mailhog.auth

  gateway:
    build:
      context: apps/api-gateway
      dockerfile: Dockerfile
    network_mode: host
    environment:
      KEYCLOAK_ISSUER_URI: http://10.0.2.2:8080/realms/season-link
      # KEYCLOAK_ISSUER_URI: http://localhost:8080/realms/season-link
      KEYCLOAK_JWK_URI: http://localhost:8080/realms/season-link/protocol/openid-connect/certs
      SERVER_PORT: 8081
      JOBS_SERVICE_URL: http://localhost:3000
      JOB_OFFERS_SERVICE_URL: http://localhost:8082
      COMPANIES_SERVICE_URL: http://localhost:3000
      PROFILES_SERVICE_URL: http://localhost:3000
      RATINGS_SERVICE_URL: http://localhost:3000
      NOTIFICATIONS_SERVICE_URL: http://localhost:3000
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  joboffers:
    build:
      context: apps/job-offers
    network_mode: host
    restart: unless-stopped
    environment:
      DB_NAME: joboffers
      DB_USER: postgres
      DB_PASSWORD: postgres
      R2DBC_URL: r2dbc:postgresql://localhost:5432
      JDBC_URL: jdbc:postgresql://localhost:5432/joboffers
      COMPANIES_SERVICE_URL: http://localhost:3000
      JOBS_SERVICE_URL: http://localhost:3000
      SERVER_PORT: 8082
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  mock:
    build:
      context: apps/mock
    network_mode: host
    volumes:
      - ./apps/mock/data:/app/data
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/jobs",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgresql:
